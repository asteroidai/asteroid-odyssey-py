# coding: utf-8

"""
    Asteroid Agents API

    Version 1 of the Asteroid Agents API

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Workflow(BaseModel):
    """
    Workflow
    """ # noqa: E501
    id: StrictStr = Field(description="Workflow identifier.")
    user_id: StrictStr = Field(description="The ID of the user who created the workflow.")
    result_schema: Dict[str, Any] = Field(description="A JSON Schema that defines the expected structure and validation rules for workflow results.")
    agent_id: StrictStr = Field(description="Identifier of the associated agent.")
    created_at: Optional[datetime] = Field(default=None, description="The date and time the workflow was created.")
    name: StrictStr = Field(description="Workflow name.")
    fields: Dict[str, Any] = Field(description="Workflow configuration.")
    prompts: List[StrictStr] = Field(description="The prompts for the workflow. They can have variables in them. They will be merged with the dynamic data passed when the workflow is executed.")
    prompt_variables: Optional[List[StrictStr]] = Field(default=None, description="The variables in the prompts.")
    __properties: ClassVar[List[str]] = ["id", "user_id", "result_schema", "agent_id", "created_at", "name", "fields", "prompts", "prompt_variables"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workflow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workflow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "user_id": obj.get("user_id"),
            "result_schema": obj.get("result_schema"),
            "agent_id": obj.get("agent_id"),
            "created_at": obj.get("created_at"),
            "name": obj.get("name"),
            "fields": obj.get("fields"),
            "prompts": obj.get("prompts"),
            "prompt_variables": obj.get("prompt_variables")
        })
        return _obj


