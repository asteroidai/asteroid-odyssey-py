# coding: utf-8

"""
    Asteroid Agents API

    Version 1 of the Asteroid Agents API

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BrowserSession(BaseModel):
    """
    BrowserSession
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Browser session identifier.")
    browser_name: Optional[StrictStr] = Field(default=None, description="Browser name (Anchor, Browserbase, etc.)")
    execution_id: Optional[StrictStr] = Field(default=None, description="Execution ID.")
    cdp_url: Optional[StrictStr] = Field(default=None, description="CDP URL.")
    debugger_url: Optional[StrictStr] = Field(default=None, description="Debugger URL.")
    session_id: Optional[StrictStr] = Field(default=None, description="Session ID.")
    session_url: Optional[StrictStr] = Field(default=None, description="Session URL.")
    recording_url: Optional[StrictStr] = Field(default=None, description="Recording URL.")
    __properties: ClassVar[List[str]] = ["id", "browser_name", "execution_id", "cdp_url", "debugger_url", "session_id", "session_url", "recording_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrowserSession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrowserSession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "browser_name": obj.get("browser_name"),
            "execution_id": obj.get("execution_id"),
            "cdp_url": obj.get("cdp_url"),
            "debugger_url": obj.get("debugger_url"),
            "session_id": obj.get("session_id"),
            "session_url": obj.get("session_url"),
            "recording_url": obj.get("recording_url")
        })
        return _obj


