# coding: utf-8

"""
    Asteroid Agents API

    Version 1 of the Asteroid Agents API

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from asteroid_agents_api_client.models.execution_status import ExecutionStatus
from typing import Optional, Set
from typing_extensions import Self

class Execution(BaseModel):
    """
    Execution
    """ # noqa: E501
    id: StrictStr = Field(description="Execution identifier.")
    run_id: StrictStr = Field(description="Run ID.")
    dynamic_data: Optional[Dict[str, Any]] = Field(default=None, description="Dynamic data to be merged into the saved workflow configuration.")
    workflow_id: StrictStr = Field(description="Workflow ID.")
    status: Optional[ExecutionStatus] = None
    result: Dict[str, Any] = Field(description="The result of the execution.")
    created_at: datetime = Field(description="The date and time the execution was created.")
    error: Optional[StrictStr] = Field(default=None, description="The error that occurred during the execution.")
    __properties: ClassVar[List[str]] = ["id", "run_id", "dynamic_data", "workflow_id", "status", "result", "created_at", "error"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Execution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Execution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "run_id": obj.get("run_id"),
            "dynamic_data": obj.get("dynamic_data"),
            "workflow_id": obj.get("workflow_id"),
            "status": ExecutionStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "result": obj.get("result"),
            "created_at": obj.get("created_at"),
            "error": obj.get("error")
        })
        return _obj


