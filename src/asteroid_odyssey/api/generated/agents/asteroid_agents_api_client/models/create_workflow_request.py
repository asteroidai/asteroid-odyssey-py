# coding: utf-8

"""
    Asteroid Agents API

    Version 1 of the Asteroid Agents API

    The version of the OpenAPI document: v1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateWorkflowRequest(BaseModel):
    """
    CreateWorkflowRequest
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the workflow.")
    user_id: Optional[StrictStr] = Field(default=None, description="The ID of the user that this workflow belongs to.")
    result_schema: Dict[str, Any] = Field(description="A JSON Schema that defines the expected structure and validation rules for workflow results.")
    fields: Dict[str, Any] = Field(description="JSON object containing static workflow configuration (e.g. a prompt_template).")
    prompts: List[StrictStr] = Field(description="The prompts for the workflow. They can have variables in them. They will be merged with the dynamic data passed when the workflow is executed.")
    provider: StrictStr = Field(description="The Language Model Provider for the Workflow")
    __properties: ClassVar[List[str]] = ["name", "user_id", "result_schema", "fields", "prompts", "provider"]

    @field_validator('provider')
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['openai', 'anthropic']):
            raise ValueError("must be one of enum values ('openai', 'anthropic')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateWorkflowRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateWorkflowRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "user_id": obj.get("user_id"),
            "result_schema": obj.get("result_schema"),
            "fields": obj.get("fields"),
            "prompts": obj.get("prompts"),
            "provider": obj.get("provider")
        })
        return _obj


